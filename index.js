// index.js
const path = require('path');
const { scanDependencies } = require('./scanner/dependencyScanner');
const { scanSecrets } = require('./scanner/secretScanner');
const { scanMiddlewares } = require('./scanner/middlewareScanner');
const { scanCORS } = require('./scanner/corsScanner');
const { scanRateLimit } = require('./scanner/rateLimitScanner');
const { scanSqlInjections } = require('./scanner/sqlInjectionScanner');
const { scanAuthentication } = require('./scanner/authScanner');
const { scanInputValidation } = require('./scanner/inputValidationScanner');
const { scanCSRF } = require('./scanner/csrfScanner');
const { scanCookies } = require('./scanner/cookieScanner');
const { generateReport } = require('./scanner/reportGenerator');

// Affiche une banni√®re ASCII au d√©marrage
const showBanner = () => {
  console.log(`
  ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
  ‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
  ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  
  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  
  ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
  ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
                         ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó                           
                         ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë                           
                         ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë                           
                         ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë                           
                         ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë                           
                         ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù  v1.0.0                  
  `);
};

// Fonction principale d'analyse
(async () => {
  try {
    showBanner();

    // V√©rifier les arguments de la ligne de commande
    const targetDir = process.argv[2];
    if (!targetDir) {
      console.error('‚ùå Veuillez sp√©cifier le chemin du projet √† scanner.');
      console.log('\nUtilisation: node index.js <chemin-du-projet>');
      process.exit(1);
    }

    const absolutePath = path.resolve(targetDir);
    console.log(`üîç Scan du projet : ${absolutePath}\n`);

    // D√©marrer le chronom√®tre pour mesurer le temps d'analyse
    const startTime = process.hrtime();

    console.log('‚è≥ Analyse des d√©pendances...');
    const dependencies = await scanDependencies(absolutePath);
    
    console.log('‚è≥ Recherche de secrets expos√©s...');
    const secrets = await scanSecrets(absolutePath);
    
    console.log('‚è≥ Analyse des middlewares de s√©curit√©...');
    const middlewares = await scanMiddlewares(absolutePath);
    
    console.log('‚è≥ V√©rification de la configuration CORS...');
    const cors = await scanCORS(absolutePath);
    
    console.log('‚è≥ Analyse des protections par rate limiting...');
    const rateLimit = await scanRateLimit(absolutePath);
    
    console.log('‚è≥ D√©tection des vuln√©rabilit√©s d\'injection SQL/NoSQL...');
    const sqlInjection = await scanSqlInjections(absolutePath);
    
    console.log('‚è≥ Analyse des m√©canismes d\'authentification...');
    const auth = await scanAuthentication(absolutePath);
    
    console.log('‚è≥ V√©rification de la validation des entr√©es...');
    const inputValidation = await scanInputValidation(absolutePath);
    
    console.log('‚è≥ Analyse des protections CSRF...');
    const csrf = await scanCSRF(absolutePath);
    
    console.log('‚è≥ V√©rification de la gestion des cookies...');
    const cookies = await scanCookies(absolutePath);

    // Temps d'analyse total
    const hrend = process.hrtime(startTime);
    const executionTimeInSeconds = (hrend[0] + (hrend[1] / 1e9)).toFixed(2);
    
    console.log(`\n‚úÖ Analyse termin√©e en ${executionTimeInSeconds} secondes.`);
    
    // R√©sum√© des r√©sultats
    const vulnCount = 
      (dependencies.audit ? Object.values(dependencies.audit.vulnerabilities || {}).reduce((a, b) => a + b, 0) : 0) +
      (secrets.secrets ? secrets.secrets.length : 0) +
      (middlewares.missing ? middlewares.missing.count : 0) +
      (sqlInjection ? sqlInjection.total : 0) + 
      (auth ? auth.total : 0) + 
      (inputValidation ? inputValidation.total : 0) + 
      (csrf ? csrf.total : 0) + 
      (cookies ? cookies.total : 0);
    
    console.log(`üîç R√©sum√©: ${vulnCount} probl√®mes de s√©curit√© potentiels d√©tect√©s.`);
    
    // G√©n√©rer le rapport final
    console.log('üìä G√©n√©ration du rapport de s√©curit√©...');

    const results = {
      dependencies,
      secrets,
      middlewares,
      cors,
      rateLimit,
      sqlInjection,
      auth,
      inputValidation,
      csrf,
      cookies,
      stats: {
        executionTime: executionTimeInSeconds,
        totalIssues: vulnCount
      }
    };

    const reportPath = await generateReport(results);
    console.log(`\nüéâ Rapport de s√©curit√© g√©n√©r√© avec succ√®s : ${reportPath}`);
  } catch (error) {
    console.error('‚ùå Une erreur est survenue lors de l\'analyse:', error);
    process.exit(1);
  }
})();
